class Solution:
    def romanToInt(self, s):
        """
        :type s: str
        :rtype: int
        """
        roman = {'I':1, 'IV': 4, 'V':5, 'IX':9, 
                 'X':10, 'XL':40, 'L':50, 'XC':90,
                 'C':100, 'CD': 400, 'D':500, 'CM':900, 
                 'M':1000}
        n = 0       # running sum
        i = len(s)-1 # iterating backwards to take advantage of property of augmented values
        while i >= 0:
            if s[i] in 'VXLCDM': #these can have an augmented value
                if i-1 >= 0 and roman[ s[i-1] ] < roman[ s[i] ]: # augmented values are pairs where first value is less than second
                    n += roman[ s[i-1:i+1] ] # use substring to locate augmented value in dictionary 
                    i -= 2 # skip over literal that was part of the augmented value
                    continue
            n += roman[ s[i] ] # get value from dictionary and add to running sum
            i -= 1 # move index backward one step
        return n
